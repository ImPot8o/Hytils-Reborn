/*
 * Hytilities Reborn - Hypixel focused Quality of Life mod.
 * Copyright (C) 2021  W-OVERFLOW
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
 
//file:noinspection GroovyAssignabilityCheck
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "cc.woverflow.loom" version "0.10.3"
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "java"
}

version = "1.5.1"
group = modGroup
archivesBaseName = "Hytilities-Reborn"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            arg("-Dfml.coreMods.load", "net.wyvest.hytilities.forge.FMLLoadingPlugin")
            arg("--mixin", "mixins.hytilities.json")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new Pack200Adapter()
        mixinConfig("mixins.hytilities.json")
        mixin.defaultRefmapName.set("mixins.hytilities.refmap.json")
    }
}

configurations {
    // Creates an extra configuration that extends from `implementation` to be used later as the configuration that shades libraries
    include
    implementation.extendsFrom include
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

dependencies {
    minecraft('com.mojang:minecraft:1.8.9')
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
    annotationProcessor("com.google.code.gson:gson:2.2.4")
    annotationProcessor("com.google.guava:guava:21.0")
    annotationProcessor("org.ow2.asm:asm-tree:6.2")
    compileOnly 'cc.woverflow:onecore:1.3.3'
    compileOnly 'gg.essential:essential-1.8.9-forge:1933'
    compileOnly("org.spongepowered:mixin:0.8.5-SNAPSHOT")
    include ('cc.woverflow:onecore-tweaker:1.3.0') {
        transitive = false
    }
}

jar {
    manifest.attributes(
            "ModSide": "CLIENT",
            "FMLCorePluginContainsFMLMod": "No",
            "FMLCorePlugin": "net.wyvest.hytilities.forge.FMLLoadingPlugin",
            "TweakClass": "cc.woverflow.onecore.tweaker.OneCoreTweaker",
            "TweakOrder": "0",
            "FMLAT": "hytilities_at.cfg",
            "MixinConfigs": "mixins.hytilities.json"
    )

    enabled = false
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "name", mod_name
    inputs.property "id", mod_id

    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version
        )
    }
    filesMatching("mixins.${mod_id}.json") {
        expand("id": mod_id)
    }
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "LICENSE.md"
    exclude "pack.mcmeta"
    exclude "dummyThing"
    exclude "**/module-info.class"
    exclude "*.so"
    exclude "*.dylib"
    exclude "*.dll"
    exclude "*.jnilib"
    exclude "ibxm/**"
    exclude "com/jcraft/**"
    exclude "org/lwjgl/**"
    exclude "net/java/**"

    exclude "META-INF/proguard/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/com.android.tools/**"

    exclude "fabric.mod.json"
}

sourceSets {
    dummy
    main {
        compileClasspath += dummy.output
        ext.refMap = "mixins.hytilities.refmap.json"
        output.resourcesDir = file("${buildDir}/classes/java/main")
    }
}

